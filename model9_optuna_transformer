import optuna
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Input, Dense, Dropout, LayerNormalization, MultiHeadAttention, GlobalAveragePooling1D
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.model_selection import train_test_split

# Dummy ECG Data
X = np.random.rand(100, 4096, 1)
y = np.random.randint(0, 2, 100)
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)

# Transformer Encoder with tunable params
def transformer_encoder_with_attention(inputs, head_size, num_heads, ff_dim, dropout):
    mha = MultiHeadAttention(num_heads=num_heads, key_dim=head_size, dropout=dropout)
    attn_output, attn_weights = mha(inputs, inputs, return_attention_scores=True)
    x = Dropout(dropout)(attn_output)
    x = LayerNormalization(epsilon=1e-6)(x + inputs)

    x_ff = Dense(ff_dim, activation='relu')(x)
    x_ff = Dense(inputs.shape[-1])(x_ff)
    x_ff = Dropout(dropout)(x_ff)

    x_out = LayerNormalization(epsilon=1e-6)(x + x_ff)
    return x_out, attn_weights

# Build transformer model for Optuna
def build_model(trial):
    inputs = Input(shape=(4096, 1))

    head_size = trial.suggest_categorical("head_size", [32, 64, 128])
    num_heads = trial.suggest_int("num_heads", 2, 8)
    ff_dim = trial.suggest_categorical("ff_dim", [64, 128, 256])
    dropout = trial.suggest_float("dropout", 0.1, 0.5)

    x, _ = transformer_encoder_with_attention(inputs, head_size, num_heads, ff_dim, dropout)
    x, _ = transformer_encoder_with_attention(x, head_size, num_heads, ff_dim, dropout)
    x, _ = transformer_encoder_with_attention(x, head_size, num_heads, ff_dim, dropout)

    x = GlobalAveragePooling1D()(x)

    dense_units = trial.suggest_categorical("dense_units", [32, 64, 128])
    x = Dense(dense_units, activation='relu')(x)
    x = Dropout(dropout)(x)

    outputs = Dense(1, activation='sigmoid')(x)

    model = Model(inputs, outputs)

    lr = trial.suggest_float("lr", 1e-4, 1e-2, log=True)
    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr),
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
    return model

# Objective function
def objective(trial):
    model = build_model(trial)
    early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

    history = model.fit(X_train, y_train,
                        validation_data=(X_val, y_val),
                        epochs=50,
                        batch_size=16,
                        verbose=0,
                        callbacks=[early_stop])

    val_accuracy = history.history['val_accuracy'][-1]
    return val_accuracy

# Run Optuna
study = optuna.create_study(direction="maximize")
study.optimize(objective, n_trials=20)

# Best result
print("âœ… Best Hyperparameters:")
for key, val in study.best_params.items():
    print(f"{key}: {val}")

